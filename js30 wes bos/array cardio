<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Array Cardio 💪</title>
  <link rel="icon" href="https://fav.farm/🔥" />
</head>
<body>
  <p><em>Psst: have a look at the JavaScript Console</em> 💁</p>
  <script>
    // Get your shorts on - this is an array workout!
    // ## Array Cardio Day 1

    // Some data we can work with

    const inventors = [
      { first: 'Albert', last: 'Einstein', year: 1879, passed: 1955 },
      { first: 'Isaac', last: 'Newton', year: 1643, passed: 1727 },
      { first: 'Galileo', last: 'Galilei', year: 1564, passed: 1642 },
      { first: 'Marie', last: 'Curie', year: 1867, passed: 1934 },
      { first: 'Johannes', last: 'Kepler', year: 1571, passed: 1630 },
      { first: 'Nicolaus', last: 'Copernicus', year: 1473, passed: 1543 },
      { first: 'Max', last: 'Planck', year: 1858, passed: 1947 },
      { first: 'Katherine', last: 'Blodgett', year: 1898, passed: 1979 },
      { first: 'Ada', last: 'Lovelace', year: 1815, passed: 1852 },
      { first: 'Sarah E.', last: 'Goode', year: 1855, passed: 1905 },
      { first: 'Lise', last: 'Meitner', year: 1878, passed: 1968 },
      { first: 'Hanna', last: 'Hammarström', year: 1829, passed: 1909 }
    ];

    const people = [
      'Bernhard, Sandra', 'Bethea, Erin', 'Becker, Carl', 'Bentsen, Lloyd', 'Beckett, Samuel', 'Blake, William', 'Berger, Ric', 'Beddoes, Mick', 'Beethoven, Ludwig',
      'Belloc, Hilaire', 'Begin, Menachem', 'Bellow, Saul', 'Benchley, Robert', 'Blair, Robert', 'Benenson, Peter', 'Benjamin, Walter', 'Berlin, Irving',
      'Benn, Tony', 'Benson, Leana', 'Bent, Silas', 'Berle, Milton', 'Berry, Halle', 'Biko, Steve', 'Beck, Glenn', 'Bergman, Ingmar', 'Black, Elk', 'Berio, Luciano',
      'Berne, Eric', 'Berra, Yogi', 'Berry, Wendell', 'Bevan, Aneurin', 'Ben-Gurion, David', 'Bevel, Ken', 'Biden, Joseph', 'Bennington, Chester', 'Bierce, Ambrose',
      'Billings, Josh', 'Birrell, Augustine', 'Blair, Tony', 'Beecher, Henry', 'Biondo, Frank'
    ];
    
    // Array.prototype.filter()
    # // 1. Filter the list of inventors for those who were born in the 1500's
    const fifteen = inventors.filter(function(inventor) {
        if(inventor.year >= 1500 && inventor.year <= 1599) {
            return true;
        }
    });
        console.log(fifteen);

        const fifteen = inventors.filter( inventor => (inventor.year >= 1500 && inventor.year <= 1599);
            #   // of both are true a boolean of true returned


    // Array.prototype.map()
    # // 2. Give us an array of the inventors first and last names
        const fullName = inventors.map(inventor => `{$inventor.first} + ${inventor.last}`;
        



    // Array.prototype.sort()
    # // 3. Sort the inventors by birthdate, oldest to youngest
        # // turn to 1 and -1 to move up and down in array
        const ordered = inventors.sort(function(person1, person2) {
            if(person1.year > person2.year) {
                return 1;
            } else {
                return -1;
            }
        });
    
        const ordered = inventors.sort(person1, person2) => person1.year > person2.year ? 1 : -1;
             
    
    // Array.prototype.reduce()
    # // 4. How many years did all the inventors live all together?
# // create array with all years lived
            const yearsLived = inventors.reduce(total, inventor) => {
                return total + (inventor.passed - inventor.year);
            }, 0);
            



    // 5. Sort the inventors by years lived

        const sortedInv = inventors.sort((inventorA, inventorB)=> {
            # // create consts for years 
        return (inventorA.passed - inventorA.years > inventorB.passed - inventorB.years) ? 1 : -1; 
            })

            

# // filter takes 1 parameter only
    // 6. create a list of Boulevards in Paris that contain 'de' anywhere in the name
    // https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris

        const filteredPeople = people.filter(function(name) {
            (name.includes('de')) ? true : false;
            })

            const filteredPeople = people.filter(name => (name.includes('de')) ? true : false);
    




    // 7. sort Exercise
    // Sort the people alphabetically by last name

            const sortedByName = inventors.sort(function(a,b) {
               return a.last - b.last ? 1 : -1;
            })

            const sortedByName = inventors.sort(a,b) => a.last - b.last ? 1 : -1;
 




            const sorted = people.sort(function(person1, person2) {
                return person1.charAt(0) - person2.charAt(0) ? 1 : -1;
            })

            const sorted = people.sort(function(person1, person2) {
                return person1[0] - person2.charAt(0) ? 1 : -1;
            })


    // 8. Reduce Exercise
    // Sum up the instances of each of these
    const data = ['car', 'car', 'truck', 'truck', 'bike', 'walk', 'car', 'van', 'bike', 'walk', 'car', 'van', 'car', 'truck' ];


            const transportation = data.reduce(function(obj, item) { 
                    if (!obj[item]) {
                        obj[item] = 0;
                    }
                    obj[item]++;
                    return obj;
            }, {});
            
            console.log(transportation);

// ## Array Cardio Day 2

const people = [
    { name: 'Wes', year: 1988 },
    { name: 'Kait', year: 1986 },
    { name: 'Irv', year: 1970 },
    { name: 'Lux', year: 2015 }
  ];
  
  const comments = [
    { text: 'Love this!', id: 523423 },
    { text: 'Super good', id: 823423 },
    { text: 'You are the best', id: 2039842 },
    { text: 'Ramen is my fav food ever', id: 123523 },
    { text: 'Nice Nice Nice!', id: 542328 }
  ];


   // Some and Every Checks
  // is there a year greater than 2000 in the array ?  true
  const nineteenplus = people.some(function checkAge(element) {
      if (2024 - element.year >= 19) {
        return true;
      } else {
        return false;
      }
    }
  )
  console.log(nineteenplus)

  const nineteenPlus = people.some(function(person) {
    const currentYear = (new Date()).getFullYear();
    if(currentYear - person.year >= 19) {
        return true;
    }
  })
console.log({nineteenPlus});


  const nineteenPlus = people.some(person => {
    const currentYear = (new Date()).getFullYear();
    return (currentYear - person.year >= 19);
    }
  )

  const nineteenPlus = people.some(person => ((2024 - person.year >= 19)));
  

  // Array.prototype.some() // is at least one person 19 or older?
  
  const nineteenplus = people.some(function checkAge(person) {
    return (2023 - person.year >= 19 ? true : false);
  });
  console.log(nineteenplus);

  
  const nineteenplus = people.some(person => (2023 - person.year >= 19));
  console.log(nineteenplus);


   // Array.prototype.every() // is everyone 19 or older?
  const everyoneIsOld = people.every(person => (2023 - person.year >= 19));
  console.log(everyoneIsOld);


  // Array.prototype.find()
  // Find is like filter, but instead returns just the one you are looking for
  // find the comment with the ID of 823423
  const target = 823423;

  const commentByID = comments.find((comment) => comment.id === target);
  console.log(commentByID);

 
  
  const comment = comments.find(function(comment) {
    if(comment.id === 823423) {
        return true;
    }
  })

  const comment = comments.find(comment => comment.id === 8234231);
  console.log(comment);
  
  // Array.prototype.findIndex()
  // Find the comment with this ID
  // delete the comment with the ID of 823423
 
const index = comments.findIndex(comment => comment.id === 823423);
console.log(index);

comments.splice(index, 1);
// or create new array of updated

const newComments = [
    ...comments.slice(0, index),
    ...comments,slice(index + 1),
];
console.table(newComments);



const inventors = [
      { first: 'Albert', last: 'Einstein', year: 1879, passed: 1955 },
      { first: 'Isaac', last: 'Newton', year: 1643, passed: 1727 },
      { first: 'Galileo', last: 'Galilei', year: 1564, passed: 1642 },
      { first: 'Marie', last: 'Curie', year: 1867, passed: 1934 },
      { first: 'Johannes', last: 'Kepler', year: 1571, passed: 1630 },
      { first: 'Nicolaus', last: 'Copernicus', year: 1473, passed: 1543 },
      { first: 'Max', last: 'Planck', year: 1858, passed: 1947 },
      { first: 'Katherine', last: 'Blodgett', year: 1898, passed: 1979 },
      { first: 'Ada', last: 'Lovelace', year: 1815, passed: 1852 },
      { first: 'Sarah E.', last: 'Goode', year: 1855, passed: 1905 },
      { first: 'Lise', last: 'Meitner', year: 1878, passed: 1968 },
      { first: 'Hanna', last: 'Hammarström', year: 1829, passed: 1909 }
    ];

    const people = [
      'Bernhard, Sandra', 'Bethea, Erin', 'Becker, Carl', 'Bentsen, Lloyd', 'Beckett, Samuel', 'Blake, William', 'Berger, Ric', 'Beddoes, Mick', 'Beethoven, Ludwig',
      'Belloc, Hilaire', 'Begin, Menachem', 'Bellow, Saul', 'Benchley, Robert', 'Blair, Robert', 'Benenson, Peter', 'Benjamin, Walter', 'Berlin, Irving',
      'Benn, Tony', 'Benson, Leana', 'Bent, Silas', 'Berle, Milton', 'Berry, Halle', 'Biko, Steve', 'Beck, Glenn', 'Bergman, Ingmar', 'Black, Elk', 'Berio, Luciano',
      'Berne, Eric', 'Berra, Yogi', 'Berry, Wendell', 'Bevan, Aneurin', 'Ben-Gurion, David', 'Bevel, Ken', 'Biden, Joseph', 'Bennington, Chester', 'Bierce, Ambrose',
      'Billings, Josh', 'Birrell, Augustine', 'Blair, Tony', 'Beecher, Henry', 'Biondo, Frank'
    ];


// Filter the list of inventors for those who were born in the 1500s.

const ancientInventors = inventors.filter(inventor => inventor.year >= 1500 && inventor.year <= 1600);


// Filter the list of inventors for those who were born before the year 1800 and passed away after the year 1850.
const bef1800 = inventors.filter(person => person.year < 1800 && person.passed > 1850);
console.log(bef1800);


// Filter the list of inventors for those whose first names contain the letter 'a' (case insensitive).
function letterA (name) {
  if(name.includes('a') {
    return true;
  })
}

const letterA = name => name.includes('a');

const inventorsWithA = inventors.filter(person => letterA(person.first));


// Filter the list of inventors for those whose last names contain the letter 'o' (case insensitive).

const findO = inventor => (inventor.last).includes('o');

const inventorsWithO = inventors.filter(inventor => findO(inventor.last));


//find letter k in people

const peopleWithK = people.filter(name => name.includes('k') || name.includes('K'));
const peopleWithK = people.filter(name => name.toLowerCase().includes('k'));


// Create an array of the inventors' first and last names.
const newInventors = [...inventors].map(inventor => ({
  first: inventor.first,
  last: inventor.last,
}));




// Sort the inventors by birthdate, from oldest to youngest.




// Calculate the total number of years lived by all the inventors combined.




// Sort the inventors by the number of years they lived.

































arrows

function add(a, b) {
    return a + b;
}

const add = (a, b) => a + b;

function multiply(a, b) {
    return a * b;
}
const multiply = (a, b) => a * b;


function greet(name) {
    return 'Hello, ' + name + '!';
}
const greet = name => 'Hello, ' + name + '!';

function isEven(num) {
    return num % 2 === 0;
}

const isEven = num => num % 2 === 0;

function doubleArray(arr) {
    return arr.map(function (num) {
        return num * 2;
    });
}

const doubleArray = arr => array.map((num => num *2));



function power(base, exponent) {
    return Math.pow(base, exponent);
}
const power = (base, exponent) => Math.pow(base, exponent);


function greetUser(user) {
    return `Welcome, ${user.name}! You are ${user.age} years old.`;
}

const greetUser = user => `Welcome, ${user.name}! You are ${user.age} years old.`;

function sumArray(arr) {
    return arr.reduce(function (total, num) {
        return total + num;
    }, 0);
}

const sumArray = arr => arr.reduce((total, num) => total + num);


function filterEvenNumbers(arr) {
    return arr.filter(function (num) {
        return num % 2 === 0;
    });
}

const filterEvenNumbers = arr => arr.filter(num => num % 2 === 0);

function createPerson(name, age) {
    return {
        name: name,
        age: age
    };
}

const createPerson = (name, age) => ({ name, age,});


const toppings = ['Mushrooms ', 'Tomatoes', 'Eggs', 'Chili', 'Lettuce', 'Avocado', 'Chiles', 'Bacon', 'Pickles', 'Onions', 'Cheese'];

    const buns = ['egg', 'wonder', 'brioche'];

    const meats = {
      beyond: 10,
      beef: 5,
      pork: 7
    };

    const prices = {
      hotDog: 453,
      burger: 765,
      sausage: 634,
      corn: 234,
    };

    const orderTotals = [342, 1002, 523, 34, 634, 854, 1644, 2222];

    const feedback = [
      { comment: 'Love the burgs', rating: 4 },
      { comment: 'Horrible Service', rating: 2 },
      { comment: 'Smoothies are great, liked the burger too', rating: 5 },
      { comment: 'Ambiance needs work', rating: 3 },
      { comment: 'I DONT LIKE BURGERS', rating: 1 },
    ];


    /*
      Static Methods
    */

    // Array.of();
    Array.of('kaska', 'laser')
    //not really used instead
    ["kaska", "laser"]

    // Make a function that creates a range from x to y with Array.from();
    // let x;
    // let y;
    // const arrayRange = (start, stop, step) => 
    //   Array.from(
    //     { length: (stop - start) / step +1 },
    //     (value, index) => start + index * step
    //   );

    //   const arrayRange = (x, y step) => 
    //   Array.from(
    //     { length: (y - x) / step +1 },
    //     (value, index) => x + index * step
    //   );

// in callback the first arg is undefined so doesnt do anything _item, 2nd index 
    const range = Array.from({ length: 10 }, function (item, index) {
      return index;
    });

    function createRange(start, end) {
      const range = Array.from({ length: end - start + 1   <!--plus one to be inclusive--> }, function (item, index) {
      return index + start;
    });
    return range;
    }
    const myRange = createRange(2, 8)
//range is most likely alwatys an object with a length on it 

    // Check if the last array you created is really an array with Array.isArray();
    console.log(Array.isArray(myRange));

    // Take the meats object and make three arrays with Object.entries(), Object.keys, Object.values()
    // const meats ={
    //   type: 'ham',
    //   matured: '24 months',
    //   origin: 'Spain',
    // };  

    // for (const [key, value] of Object.entries(meats)) {
    //   return(`${key}: ${value}`);
    // };
      const meats  = {
        pork: 5,
        beef: 10,
        chicken: 2,
      }

    console.log(Object.entries(meats));
    console.log(Object.keys(meats));
    console.log(Object.values(meats));

    Object.values(meats).forEach(qty => {
      console.log(qty);
    })

    Object.entries(meats).forEach(entry => {
      const key = entry[0];
      const value = entry[1];
      console.log(key, value);
    });

    //destructuring
    Object.entries(meats).forEach(entry => {
      // const key = entry[0];
      // const value = entry[1];
      const [key, value] = entry;
      console.log(key, value);
    });

//step further destructore entry var globally
Object.entries(meats).forEach(([key, value]) => {
      // const key = entry[0];
      // const value = entry[1];
      // const [key, value] = entry
      console.log(key, value);
    });

    //key value can be named whatever meat, qty, meattype ile

    /*
      Instance Methods
    */

    // Display all bun types with " or " - use join()

    console.log(buns.join(' or '));

    // We have a string "hot dogs,hamburgers,sausages,corn" - use split() to turn it into an array
    const foodString = "hot dogs,hamburgers,sausages,corn";
    console.log(foodString.split(','));
    //takes into array 

    // take the last item off toppings with pop()
    const topping = toppings.pop(); 

    // add it back with push()
    const t2 = toppings.push('topping');
    console.log(toppings);

    // take the first item off toppings with shift()
    const firstItem = toppings.shift();
    console.log(firstItem);

    // add it back in with unshift()
    toppings.unshift(firstItem);
    console.log(toppings);
    
    // Do the last four,but immutable (with spreads and new variables)
    let newToppings = toppings.slice(0, toppings.length -1);
    newToppings = [...newToppings, toppings[toppings.length -1]];

    // Make a copy of the toppings array with slice()
    const newToppings2 = toppings.slice(0);

    // Make a copy of the toppings array with a spread
    const toppingsCopy = [...toppings];

    // take out items 3 to 5 of your new toppings array with splice()
    const removeTopp = toppingsCopy.splice(3, 5);

    // find the index of Avocado with indexOf() / lastIndexOf()
    const avoIndex = toppings.indexOf('Avocado');
    console.log(avoIndex);

    // Check if hot sauce is in the toppings with includes() - not case sensitive
    const isInTopp = toppings.includes('hot sauce');
    console.log(isInTopp);
    
    // add it if it's not
    if(!isInTopp) {
      toppings.push('hot sauce');
    };
    console.log('toppings');

    
    // flip those toppings around with reverse()
//mutable
toppings.reverse();

immutable
const toppingsRev = [...toppings].reverse(); 
    /*
      Callback Methods
    */

    // find the first rating that talks about a burger with find() - function can be reused on many arrays 
// function findBurgRating(feedback, i, array) {

  function findBurgRating(singleFeedback) {
    console.log(singleFeedback);
    return true;
  }
//as soon as you return true it stops so

function findBurgRating(singleFeedbacl) {
  if(singleFeedback.comment.includes('burg')) {
    return true;
    { else {
      return false;
    }}
  }
}
//can make shorter by returmong burg

function findBurgRating(singleFeedback) {
  return singleFeedback.comment.includes('burg');
}



  // instead of below, pass the function
    const burgRating = feedback.find(singleFeedback => {
      feedback.comment.includes('burg');
      console.log(burgRating);
    });
    //returns true or false

const burgRating = feedback.find(findBurgRating);
console.log(burgRating);

// no () at the end as not calliing, only passing ref to function and js will call it for feedbacks
// if running more than once the same code - refactor in own function 
// so can be a 
function findBurgRating(singleFeedback) {
  return singleFeedback.comment.includes('burg');
}
// or 
const burgRating = feedback.find(findBurgRating);
// can also make it into an arrow function explicit
const findBurgerRating = (singleFeedback) => {
  return singleFeedback.comment.includes('burg');
}
// or implicit
const findBurgerRating = (singleFeedback) => singleFeedback.comment.includes('burg');

// grouping functions into an object with utility functions for finsding stuff
const util = {
  findBurgRating: function (singleFeedback) {
  return singleFeedback.comment.includes('burg');
}
// put function inside an object, that makes it a method, to look for staff is util.
//or we can create a mum function that is more general - will return more functons 
function findByWord(word) {
  return function (singleFeedback) {
    return singleFeedback.comment.includes(word);
  }
}; 

//function that makes a function
const burgFinder = findbyWord('burg)';
const burgRating = feedback.find(burgFinder);

const smoothieFinder = findbyWord('smoothie');
const smoothieRating = feedback.find(smoothieFinder);
//function to find - we dont needs vars as they are temporary variables so
const burgRating = feedback.find(findbyWord('burg'));
const smoothieRating = feedback.find(findbyWord('smoothie'));
// findbyword retur ns a function which will find 

function findByWord(word: any): 
(singleFeedback: any) => any

// find all ratings that are above 2 with filter()
//filter returns a new array - t or false - loops over all
const goodReviews = feedback.filter(singleFeedback => {
  if (singleFeedback.rating > 2) {
    return true;
  } else {
    return false;
  }
});
console.table(goodReviews);

//to make better - return condition and make implicit
const goodReviews = feedback.filter(singleFeedback => {
  return singleFeedback.rating > 2);
  };
console.table(goodReviews);

const goodReviews = feedback.filter(singleFeedback => singleFeedback.rating > 2);
console.table(goodReviews);

// create function that returns function to find
function filterByMinRating(minRating) {
  return function (singleFeedback {
    return singleFeedback.rating > minRating;
  });
};

const goodReviews = feedback.filter(filterByMinRating(2));
console.table(goodReviews);

    // find all ratings that talk about a burger with filter()
const burgRatings = feedback.filter(singleFeedback => singleFeedback.comment.includes('burg'))
//or reuse function 
function findByWord(word) {
  return function (singleFeedback) {
    return singleFeedback.comment.includes(word);
  }
}; 

const burgRatings = feedback.filter(findByWord('burg'));


    // Remove the one star rating however you like! filter only ones we want
    const ratingOneRemoved = feedback.filter(single => single.rating === 1);
console.table(ratingOneRemoved);
//above will give the onestare, to get ioppoiste use !
const ratingOneRemoved = feedback.filter(single => single.rating !== 1);
console.table(ratingOneRemoved);


    // check if there is at least 5 of one type of meat with some()
    Object.keys. / .values
const isThereEnoughOfAtLeastOneMeat = Object.values(meats).some(meatValue => meatValue >= 5);
console.log(isThereEnoughOfAtLeastOneMeat);

    // make sure we have at least 3 of every meat with every()
const isThereEnoughOfEveryMeat = Object.values(meats).every(meatValue => meatValue >= 3);
console.log(isThereEnoughOfEveryMeat);

    // sort the toppings alphabetically with sort()
    // to sort numbers
  // tell js which items
    const numbers = [1, 4, 100, 500, 144];
    const numbersSorted = numbers.sort(function (firstItem, secondItem) {
    // console.log(fistItem, secondItem);
    if (firstItem > secondItem) {
      return 1;
    } else if (secondItem > firstItem) {
        return -1;
    } else {
        return 0;
      }
    });
  console.log(numbersSorted);

  // sort because it's an array sorting ahppens on index 
  
  // sorts as string by default

  // to use on numbers

  //dont have to return 0 -1 and just return firstItem - secondItem
  const numbers = [1, 4, 100, 500, 144];
    const numbersSorted = numbers.sort(function (firstItem, secondItem) {
    // console.log(fistItem, secondItem);
    return firstItem - secondItem;
    });
  console.log(numbersSorted);
  // sorts as string

const soretedToppings = toppings.sort()
console.log(sortedToppings);

//turn to =>
const numbersSorted = numbers.sort((firstItem, secondItem) => firstItem - secondItem);
    

// sort the order totals from most expensive to least with .sort()
// const totalPriceToppings = toppinngs.value.sort(function (secondItem, firstItem) {
//   return secondItem - firstItem;
// });
// console.log(totalPriceToppings);
function numberSort(a, b) {
  return a - b;
}
console.log(orderTotals.sort(numberSort))

    // Sort the prices with sort()

const priductsSortedByPrice = Object.entries(prices).sort(function(a, b) {
  // debugger;
  // 2 arrays
  const aPrice = a[1];
  const bPrice = b[1];
  return aPrice - bPrice;
});
console.table(priductsSortedByPrice);


    /*
      Looping Methods (next)
    */











  </script>
</body>
</html>